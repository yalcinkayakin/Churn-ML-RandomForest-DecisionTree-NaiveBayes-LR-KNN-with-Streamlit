# -*- coding: utf-8 -*-
"""churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12o9Zozy7m5tfi6lqKE5DlEg0VwdtR55e
"""

import pandas as pd
import numpy as np
import os
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('churn.csv',)

df.head()

df.shape

df.describe()

df.columns

df.dtypes

df.isnull().sum()

df.gender= df.gender.map({'Male':1,'Female':0})
df.gender.value_counts()

df.Partner = df.Partner.map({'Yes':1 , 'No':0})
df.Dependents = df.Dependents.map({'Yes':1 , 'No':0})
df.PhoneService = df.PhoneService.map({'Yes':1 , 'No':0})

df.Partner.value_counts()
df.Dependents.value_counts()
df.PhoneService.value_counts()

df

df.OnlineSecurity = df.OnlineSecurity.map({'Yes':2 , 'No':1, 'No internet service':0})
df.OnlineBackup = df.OnlineBackup.map({'Yes':2 , 'No':1 , 'No internet service':0})
df.DeviceProtection = df.DeviceProtection.map({'Yes':2 , 'No':1 , 'No internet service':0})

df.OnlineSecurity.value_counts()
df.OnlineBackup.value_counts()
df.DeviceProtection.value_counts()

df.TechSupport = df.TechSupport.map({'Yes':2 , 'No':1 , 'No internet service':0})
df.StreamingMovies = df.StreamingMovies.map({'Yes':2 , 'No':1 , 'No internet service':0})
df.StreamingTV = df.StreamingTV.map({'Yes':2 , 'No':1 , 'No internet service':0})
df.Churn = df.Churn.map({'Yes':1 , 'No':0})
df.PaperlessBilling = df.PaperlessBilling.map({'Yes':1 , 'No':0})
df.InternetService = df.InternetService.map({'Fiber optic':2 , 'DSL':1, 'No':0})

df.MultipleLines = df.MultipleLines.map({'No phone service':0 , 'No':1 ,'Yes':2})
df.Contract = df.Contract.map({'Month-to-month':0,
                                'One year':1,
                                'Two year':2,
                                })

df.PaymentMethod = df.PaymentMethod.map({
'Electronic check'         :1,    
'Mailed check'             :2,   
'Bank transfer (automatic)':3,    
'Credit card (automatic)' :4
})

df.dtypes

df.count()

df['TotalCharges']

corrmat=df.corr()
f,ax=plt.subplots(figsize=(9,9))
sns.heatmap(corrmat,vmax=.8,square=True)

df.drop('customerID',inplace=True,axis=1)
df.drop('TotalCharges' , inplace = True,axis = 1)



df.describe()

target_label = {'Yes':1 , 'No':0}

df['Churn'].value_counts().plot(kind ='bar')

df.dtypes

MonthlyCharges = df['MonthlyCharges']

df.MonthlyCharges = list(map(float ,MonthlyCharges))

df.dtypes

df.gender.value_counts().plot(kind = 'bar')

q1 = df.quantile(0.25)
q3 = df.quantile(0.75)

IQR = q3-q1

IQR

(df < (q1 -1.5 * IQR)) | (df >(q3 + 1.5 * IQR))

df_no_outlier = df[~((df < (q1 -1.5 * IQR)) | (df >(q3 + 1.5 * IQR))).any(axis=1)]

df_no_outlier

df.shape

df_no_outlier.shape

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB


from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

Xfeatures = df[[  'gender', 'SeniorCitizen', 'Partner', 'Dependents',
       'tenure', 'PhoneService', 'MultipleLines', 'InternetService',
       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',
       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',
              'PaymentMethod', 'MonthlyCharges']]

ylabels = df['Churn']

type(Xfeatures)

ylabels

X_train, X_test, Y_train, Y_test = train_test_split(Xfeatures, ylabels, test_size=0.30, random_state=7)

logit = LogisticRegression()
logit.fit(X_train, Y_train)

print("Accuracy Score:",accuracy_score(Y_test, logit.predict(X_test)))

DT = DecisionTreeClassifier()
DT.fit(X_train, Y_train)

X_test

print("Accuracy Score:",accuracy_score(Y_test, DT.predict(X_test)))

KNN = KNeighborsClassifier(n_neighbors=3)
KNN.fit(X_train,Y_train)

print("Accuracy Score:",accuracy_score(Y_test, KNN.predict(X_test)))

NB = GaussianNB()
NB.fit(X_train , Y_train)

print("Accuracy Score:",accuracy_score(Y_test, NB.predict(X_test)))

RF = RandomForestClassifier()
RF.fit(X_train ,Y_train)

print("Accuracy Score:",accuracy_score(Y_test, RF.predict(X_test)))

import joblib

model_file = open('LR5_loan.pkl', 'wb')
joblib.dump(logit,model_file)
model_file.close()

model_file = open('RF5_loan.pkl', 'wb')
joblib.dump(RF,model_file)
model_file.close()

model_file = open('DT5_loan.pkl', 'wb')
joblib.dump(DT,model_file)
model_file.close()

model_file = open('KNN5_Loan.pkl', 'wb')
joblib.dump(KNN,model_file)
model_file.close()

model_file = open('NB5_Loan.pkl', 'wb')
joblib.dump(NB,model_file)
model_file.close()

from IPython.display import Image
from sklearn import tree
import pydotplus

feature_names_best = Xfeatures.columns

target_names = ["No","Yes"]

dot_data = tree.export_graphviz(DT,out_file=None,feature_names=feature_names_best,class_names=target_names)

graph = pydotplus.graph_from_dot_data(dot_data)

Image(graph.create_png())

from sklearn.metrics import confusion_matrix

y_pred = KNN.predict(X_test)
accuracy_score(Y_test,y_pred)
confusion_matrix(Y_test,y_pred)

from sklearn.metrics import plot_confusion_matrix

plot_confusion_matrix(NB,X_test,Y_test)
plot_confusion_matrix(DT,X_test,Y_test)
plot_confusion_matrix(KNN,X_test,Y_test)
plot_confusion_matrix(RF,X_test,Y_test)
plot_confusion_matrix(logit,X_test,Y_test)

df.to_csv("temiz_veri",index=False)